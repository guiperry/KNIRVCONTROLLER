name: Build and Test

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  build-and-test:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [18.x, 20.x]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
        cache-dependency-path: KNIRVCONTROLLER/package-lock.json

    - name: Install Rust
      uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
        target: wasm32-unknown-unknown
        override: true

    - name: Install AssemblyScript
      run: npm install -g assemblyscript

    - name: Install dependencies
      working-directory: ./KNIRVCONTROLLER
      run: npm ci

    - name: Lint code
      working-directory: ./KNIRVCONTROLLER
      run: npm run lint

    - name: Build WASM (AssemblyScript)
      working-directory: ./KNIRVCONTROLLER
      run: npm run build:wasm:assemblyscript

    - name: Build WASM (Rust)
      working-directory: ./KNIRVCONTROLLER
      run: |
        cd rust-wasm
        cargo build --target wasm32-unknown-unknown --release

    - name: Build frontend
      working-directory: ./KNIRVCONTROLLER
      run: npm run build

    - name: Run unit tests
      working-directory: ./KNIRVCONTROLLER
      run: npm run test:unit

    - name: Run integration tests
      working-directory: ./KNIRVCONTROLLER
      run: npm run test:integration

    - name: Generate test coverage
      working-directory: ./KNIRVCONTROLLER
      run: npm run test:coverage

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./KNIRVCONTROLLER/coverage/lcov.info
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

    - name: Check bundle size
      working-directory: ./KNIRVCONTROLLER
      run: |
        npm run build
        ls -la dist/
        echo "Frontend bundle built successfully"

    - name: Verify WASM artifacts
      working-directory: ./KNIRVCONTROLLER
      run: |
        ls -la build/
        echo "WASM artifacts:"
        file build/*.wasm || echo "No WASM files found"
        ls -la rust-wasm/target/wasm32-unknown-unknown/release/ || echo "No Rust WASM artifacts"

  accessibility-test:
    runs-on: ubuntu-latest
    needs: build-and-test

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Use Node.js 20.x
      uses: actions/setup-node@v4
      with:
        node-version: 20.x
        cache: 'npm'
        cache-dependency-path: KNIRVCONTROLLER/package-lock.json

    - name: Install dependencies
      working-directory: ./KNIRVCONTROLLER
      run: npm ci

    - name: Run accessibility tests
      working-directory: ./KNIRVCONTROLLER
      run: npm run test:accessibility

  e2e-test:
    runs-on: ubuntu-latest
    needs: build-and-test

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Use Node.js 20.x
      uses: actions/setup-node@v4
      with:
        node-version: 20.x
        cache: 'npm'
        cache-dependency-path: KNIRVCONTROLLER/package-lock.json

    - name: Install dependencies
      working-directory: ./KNIRVCONTROLLER
      run: npm ci

    - name: Install Playwright
      working-directory: ./KNIRVCONTROLLER
      run: npx playwright install

    - name: Build application
      working-directory: ./KNIRVCONTROLLER
      run: npm run build

    - name: Run E2E tests
      working-directory: ./KNIRVCONTROLLER
      run: npm run test:e2e

    - name: Upload E2E test results
      uses: actions/upload-artifact@v3
      if: failure()
      with:
        name: playwright-report
        path: KNIRVCONTROLLER/test-results/
        retention-days: 30

  security-scan:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Use Node.js 20.x
      uses: actions/setup-node@v4
      with:
        node-version: 20.x
        cache: 'npm'
        cache-dependency-path: KNIRVCONTROLLER/package-lock.json

    - name: Install dependencies
      working-directory: ./KNIRVCONTROLLER
      run: npm ci

    - name: Run security audit
      working-directory: ./KNIRVCONTROLLER
      run: npm audit --audit-level=moderate

    - name: Run dependency check
      working-directory: ./KNIRVCONTROLLER
      run: |
        npx license-checker --summary
        echo "Dependency check completed"

  performance-test:
    runs-on: ubuntu-latest
    needs: build-and-test

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Use Node.js 20.x
      uses: actions/setup-node@v4
      with:
        node-version: 20.x
        cache: 'npm'
        cache-dependency-path: KNIRVCONTROLLER/package-lock.json

    - name: Install dependencies
      working-directory: ./KNIRVCONTROLLER
      run: npm ci

    - name: Build application
      working-directory: ./KNIRVCONTROLLER
      run: npm run build

    - name: Analyze bundle
      working-directory: ./KNIRVCONTROLLER
      run: |
        npm run analyze-bundle || echo "Bundle analysis completed"
        echo "Performance test completed"

  notify-status:
    runs-on: ubuntu-latest
    needs: [build-and-test, accessibility-test, e2e-test, security-scan, performance-test]
    if: always()

    steps:
    - name: Notify build status
      run: |
        if [ "${{ needs.build-and-test.result }}" == "success" ] && \
           [ "${{ needs.accessibility-test.result }}" == "success" ] && \
           [ "${{ needs.e2e-test.result }}" == "success" ] && \
           [ "${{ needs.security-scan.result }}" == "success" ] && \
           [ "${{ needs.performance-test.result }}" == "success" ]; then
          echo "✅ All tests passed successfully!"
        else
          echo "❌ Some tests failed. Check the logs for details."
          exit 1
        fi
