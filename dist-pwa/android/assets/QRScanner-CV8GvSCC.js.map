{"version":3,"file":"QRScanner-CV8GvSCC.js","sources":["../../src/services/QRPaymentService.ts","../../src/components/QRScanner.tsx"],"sourcesContent":["/**\n * QR Payment Processing Service\n * Handles QR code scanning, payment processing, and transaction management\n */\n\nimport { walletIntegrationService, TransactionRequest } from './WalletIntegrationService';\n\nexport interface QRPaymentRequest {\n  type: 'payment' | 'skill_invocation' | 'wallet_connect' | 'agent_deploy';\n  amount?: string;\n  recipient?: string;\n  skillId?: string;\n  skillName?: string;\n  agentId?: string;\n  nrnCost?: string;\n  memo?: string;\n  sessionId?: string;\n  expires?: number;\n  metadata?: Record<string, unknown>;\n}\n\nexport interface QRScanResult {\n  success: boolean;\n  data?: QRPaymentRequest;\n  error?: string;\n  rawData?: string;\n}\n\nexport interface PaymentProcessingResult {\n  success: boolean;\n  transactionId?: string;\n  error?: string;\n  processingTime: number;\n  receipt?: PaymentReceipt;\n}\n\nexport interface PaymentReceipt {\n  transactionId: string;\n  type: string;\n  amount: string;\n  nrnAmount?: string;\n  recipient?: string;\n  timestamp: Date;\n  status: 'pending' | 'confirmed' | 'failed';\n  blockHeight?: number;\n  gasUsed?: number;\n}\n\nexport interface SkillInvocationPayment {\n  skillId: string;\n  skillName: string;\n  nrnCost: string;\n  parameters: Record<string, unknown>;\n  expectedOutput: Record<string, unknown>;\n  timeout: number;\n}\n\nexport class QRPaymentService {\n  private pendingPayments: Map<string, QRPaymentRequest> = new Map();\n  private paymentHistory: PaymentReceipt[] = [];\n  private baseUrl: string;\n\n  constructor(baseUrl: string = 'http://localhost:3001') {\n    this.baseUrl = baseUrl;\n  }\n\n  /**\n   * Parse QR code data\n   */\n  parseQRCode(qrData: string): QRScanResult {\n    try {\n      // Try to parse as JSON first\n      let paymentRequest: QRPaymentRequest;\n\n      try {\n        const parsed = JSON.parse(qrData);\n        \n        // Validate required fields based on type\n        if (this.isValidPaymentRequest(parsed)) {\n          paymentRequest = parsed as QRPaymentRequest;\n        } else {\n          throw new Error('Invalid payment request format');\n        }\n      } catch {\n        // Try to parse as URI format (e.g., knirv:pay?amount=100&recipient=...)\n        paymentRequest = this.parsePaymentURI(qrData);\n      }\n\n      // Check if payment request has expired\n      if (paymentRequest.expires && Date.now() > paymentRequest.expires) {\n        return {\n          success: false,\n          error: 'Payment request has expired',\n          rawData: qrData\n        };\n      }\n\n      return {\n        success: true,\n        data: paymentRequest,\n        rawData: qrData\n      };\n    } catch (error) {\n      return {\n        success: false,\n        error: error instanceof Error ? error.message : 'Invalid QR code format',\n        rawData: qrData\n      };\n    }\n  }\n\n  /**\n   * Process a payment request\n   */\n  async processPayment(paymentRequest: QRPaymentRequest): Promise<PaymentProcessingResult> {\n    const startTime = Date.now();\n    const paymentId = this.generatePaymentId();\n\n    try {\n      // Store pending payment\n      this.pendingPayments.set(paymentId, paymentRequest);\n\n      let transactionId: string;\n      let receipt: PaymentReceipt;\n\n      switch (paymentRequest.type) {\n        case 'payment': {\n          const result = await this.processRegularPayment(paymentRequest);\n          transactionId = result.transactionId;\n          receipt = result.receipt;\n          break;\n        }\n        case 'skill_invocation': {\n          const skillResult = await this.processSkillInvocationPayment(paymentRequest);\n          transactionId = skillResult.transactionId;\n          receipt = skillResult.receipt;\n          break;\n        }\n        case 'wallet_connect': {\n          const connectResult = await this.processWalletConnection(paymentRequest);\n          transactionId = connectResult.transactionId;\n          receipt = connectResult.receipt;\n          break;\n        }\n        case 'agent_deploy': {\n          const deployResult = await this.processAgentDeployment(paymentRequest);\n          transactionId = deployResult.transactionId;\n          receipt = deployResult.receipt;\n          break;\n        }\n        default:\n          throw new Error(`Unsupported payment type: ${paymentRequest.type}`);\n      }\n\n      // Add to payment history\n      this.paymentHistory.push(receipt);\n\n      // Remove from pending\n      this.pendingPayments.delete(paymentId);\n\n      // Ensure minimum processing time for realistic simulation\n      const processingTime = Math.max(1, Date.now() - startTime);\n\n      return {\n        success: true,\n        transactionId,\n        receipt,\n        processingTime\n      };\n    } catch (error) {\n      // Remove from pending on error\n      this.pendingPayments.delete(paymentId);\n\n      // Ensure minimum processing time for realistic simulation\n      const processingTime = Math.max(1, Date.now() - startTime);\n\n      return {\n        success: false,\n        error: error instanceof Error ? error.message : 'Payment processing failed',\n        processingTime\n      };\n    }\n  }\n\n  /**\n   * Process regular payment\n   */\n  private async processRegularPayment(request: QRPaymentRequest): Promise<{ transactionId: string; receipt: PaymentReceipt }> {\n    if (!request.amount || !request.recipient) {\n      throw new Error('Amount and recipient are required for regular payments');\n    }\n\n    const transactionRequest: TransactionRequest = {\n      from: walletIntegrationService.getCurrentAccount()?.address || '',\n      to: request.recipient,\n      amount: request.amount,\n      memo: request.memo,\n      nrnAmount: request.nrnCost\n    };\n\n    const transactionId = await walletIntegrationService.createTransaction(transactionRequest);\n\n    const receipt: PaymentReceipt = {\n      transactionId,\n      type: 'payment',\n      amount: request.amount,\n      nrnAmount: request.nrnCost,\n      recipient: request.recipient,\n      timestamp: new Date(),\n      status: 'pending'\n    };\n\n    return { transactionId, receipt };\n  }\n\n  /**\n   * Process skill invocation payment\n   */\n  private async processSkillInvocationPayment(request: QRPaymentRequest): Promise<{ transactionId: string; receipt: PaymentReceipt }> {\n    if (!request.skillId || !request.nrnCost) {\n      throw new Error('Skill ID and NRN cost are required for skill invocation');\n    }\n\n    const skillInvocation: SkillInvocationPayment = {\n      skillId: request.skillId,\n      skillName: request.skillName || request.skillId,\n      nrnCost: request.nrnCost,\n      parameters: request.metadata?.parameters as Record<string, unknown> || {},\n      expectedOutput: request.metadata?.expectedOutput as Record<string, unknown> || {},\n      timeout: (request.metadata?.timeout as number) || 30000\n    };\n\n    const transactionId = await walletIntegrationService.invokeSkill(skillInvocation);\n\n    const receipt: PaymentReceipt = {\n      transactionId,\n      type: 'skill_invocation',\n      amount: '0',\n      nrnAmount: request.nrnCost,\n      recipient: 'skill_network',\n      timestamp: new Date(),\n      status: 'pending'\n    };\n\n    return { transactionId, receipt };\n  }\n\n  /**\n   * Process wallet connection\n   */\n  private async processWalletConnection(_request: QRPaymentRequest): Promise<{ transactionId: string; receipt: PaymentReceipt }> {\n    // Connect to wallet using session ID\n    const account = await walletIntegrationService.connectWallet();\n\n    // Create a connection receipt\n    const transactionId = `connect_${Date.now()}`;\n    const receipt: PaymentReceipt = {\n      transactionId,\n      type: 'wallet_connect',\n      amount: '0',\n      recipient: account.address,\n      timestamp: new Date(),\n      status: 'confirmed'\n    };\n\n    return { transactionId, receipt };\n  }\n\n  /**\n   * Process agent deployment payment\n   */\n  private async processAgentDeployment(request: QRPaymentRequest): Promise<{ transactionId: string; receipt: PaymentReceipt }> {\n    if (!request.agentId || !request.nrnCost) {\n      throw new Error('Agent ID and NRN cost are required for agent deployment');\n    }\n\n    // Create deployment transaction\n    const transactionRequest: TransactionRequest = {\n      from: walletIntegrationService.getCurrentAccount()?.address || '',\n      to: 'agent_network',\n      amount: '0',\n      nrnAmount: request.nrnCost,\n      memo: `Agent deployment: ${request.agentId}`\n    };\n\n    const transactionId = await walletIntegrationService.createTransaction(transactionRequest);\n\n    const receipt: PaymentReceipt = {\n      transactionId,\n      type: 'agent_deploy',\n      amount: '0',\n      nrnAmount: request.nrnCost,\n      recipient: 'agent_network',\n      timestamp: new Date(),\n      status: 'pending'\n    };\n\n    return { transactionId, receipt };\n  }\n\n  /**\n   * Check payment status\n   */\n  async checkPaymentStatus(transactionId: string): Promise<PaymentReceipt | null> {\n    // Check local history first\n    const localReceipt = this.paymentHistory.find(r => r.transactionId === transactionId);\n    if (!localReceipt) {\n      return null;\n    }\n\n    try {\n      // Update status from wallet service\n      const transaction = await walletIntegrationService.checkTransactionStatus(transactionId);\n      \n      if (transaction) {\n        localReceipt.status = transaction.status;\n        localReceipt.blockHeight = transaction.blockHeight;\n        localReceipt.gasUsed = transaction.gasUsed;\n      }\n\n      return localReceipt;\n    } catch (error) {\n      console.error('Failed to check payment status:', error);\n      return localReceipt;\n    }\n  }\n\n  /**\n   * Get payment history\n   */\n  getPaymentHistory(): PaymentReceipt[] {\n    return [...this.paymentHistory];\n  }\n\n  /**\n   * Get pending payments\n   */\n  getPendingPayments(): QRPaymentRequest[] {\n    return Array.from(this.pendingPayments.values());\n  }\n\n  /**\n   * Generate QR code for payment request\n   */\n  generatePaymentQR(request: QRPaymentRequest): string {\n    // Add expiration if not provided (default 10 minutes)\n    if (!request.expires) {\n      request.expires = Date.now() + (10 * 60 * 1000);\n    }\n\n    // Add session ID if not provided\n    if (!request.sessionId) {\n      request.sessionId = this.generateSessionId();\n    }\n\n    return JSON.stringify(request);\n  }\n\n  /**\n   * Validate payment request format\n   */\n  private isValidPaymentRequest(data: unknown): boolean {\n    if (!data || typeof data !== 'object') {\n      return false;\n    }\n\n    interface PaymentRequestData {\n      type?: string;\n      amount?: unknown;\n      recipient?: unknown;\n      skillId?: unknown;\n      nrnCost?: unknown;\n    }\n\n    // Check required type field\n    const dataTyped = data as PaymentRequestData;\n    if (!dataTyped.type || !['payment', 'skill_invocation', 'wallet_connect', 'agent_deploy'].includes(dataTyped.type)) {\n      return false;\n    }\n\n    // Type-specific validation\n    switch (dataTyped.type) {\n      case 'payment':\n        return !!(dataTyped.amount && dataTyped.recipient);\n      case 'skill_invocation':\n        return !!(dataTyped.skillId && dataTyped.nrnCost);\n      case 'wallet_connect':\n        return true; // No additional requirements\n      case 'agent_deploy':\n        return !!((dataTyped as { agentId?: unknown; nrnCost?: unknown }).agentId && (dataTyped as { agentId?: unknown; nrnCost?: unknown }).nrnCost);\n      default:\n        return false;\n    }\n  }\n\n  /**\n   * Parse payment URI format\n   */\n  private parsePaymentURI(uri: string): QRPaymentRequest {\n    try {\n      // Validate that this looks like a valid URI format\n      if (!uri.includes(':') || !uri.startsWith('knirv:')) {\n        throw new Error('Invalid URI format - must start with knirv:');\n      }\n\n      // Parse custom knirv: protocol manually since URL constructor doesn't handle it well\n      const [protocol, rest] = uri.split(':', 2);\n      if (protocol !== 'knirv' || !rest) {\n        throw new Error('Invalid knirv URI format');\n      }\n\n      // Split path and query string\n      const [path, queryString] = rest.includes('?') ? rest.split('?', 2) : [rest, ''];\n      const params = new URLSearchParams(queryString);\n\n      // Determine type based on path\n      let type: QRPaymentRequest['type'] = 'payment';\n      if (path === 'skill') {\n        type = 'skill_invocation';\n      } else if (path === 'agent') {\n        type = 'agent_deploy';\n      } else if (path === 'connect') {\n        type = 'wallet_connect';\n      } else if (path === 'pay') {\n        type = 'payment';\n      }\n\n      const request: QRPaymentRequest = {\n        type,\n        amount: params.get('amount') || undefined,\n        recipient: params.get('recipient') || params.get('to') || undefined,\n        skillId: params.get('skill') || params.get('skillId') || undefined,\n        skillName: params.get('skillName') || undefined,\n        agentId: params.get('agent') || params.get('agentId') || undefined,\n        nrnCost: params.get('nrn') || params.get('nrnCost') || undefined,\n        memo: params.get('memo') || params.get('message') || undefined,\n        sessionId: params.get('session') || undefined\n      };\n\n      // Add expiration if provided\n      const expires = params.get('expires');\n      if (expires) {\n        request.expires = parseInt(expires, 10);\n      }\n\n      return request;\n    } catch (error) {\n      throw new Error(`Invalid payment URI format: ${error instanceof Error ? error.message : 'Unknown error'}`);\n    }\n  }\n\n  private generatePaymentId(): string {\n    return `payment_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n  }\n\n  private generateSessionId(): string {\n    return `session_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n  }\n}\n\n// Export singleton instance\nexport const qrPaymentService = new QRPaymentService();\n","import { useEffect, useRef, useState, useCallback } from 'react';\nimport QrScanner from 'qr-scanner';\nimport { Camera, Flashlight, FlashlightOff, Wallet, Send, Loader, X, CheckCircle, AlertCircle } from 'lucide-react';\nimport { qrPaymentService, QRPaymentRequest, PaymentProcessingResult } from '../services/QRPaymentService';\nimport { walletIntegrationService, Transaction, TransactionRequest } from '../services/WalletIntegrationService';\n\ninterface QRScannerProps {\n  onScan: (result: string) => void;\n  onClose: () => void;\n  isOpen: boolean;\n}\n\ninterface PaymentState {\n  step: 'scanning' | 'confirming' | 'processing' | 'success' | 'error';\n  request?: QRPaymentRequest;\n  result?: PaymentProcessingResult;\n  error?: string;\n  transaction?: Transaction;\n}\n\n// QRData interface removed as it's not currently used\n// interface QRData {\n//   version: string;\n//   type: string;\n//   session_id: string;\n//   desktop_id: string;\n//   target_id?: string;\n//   expires_at: number;\n//   endpoint: string;\n//   public_key: string;\n//   capabilities?: string[];\n//   encrypted_payload?: string;\n//   signature: string;\n// }\n\nexport default function QRScanner({\n  onScan,\n  onClose,\n  isOpen\n}: QRScannerProps) {\n  const videoRef = useRef<HTMLVideoElement>(null);\n  const [qrScanner, setQrScanner] = useState<QrScanner | null>(null);\n  const [hasFlash, setHasFlash] = useState(false);\n  const [flashEnabled, setFlashEnabled] = useState(false);\n\n  const [scanning, setScanning] = useState(false);\n  const [error, setError] = useState<string | null>(null);\n\n  // Payment workflow state\n  const [paymentState, setPaymentState] = useState<PaymentState>({ step: 'scanning' });\n  const [userBalance, setUserBalance] = useState<{ nrn: string; balance: string }>({ nrn: '0', balance: '0' });\n\n  // Load user balance when component opens\n  const loadUserBalance = useCallback(async () => {\n    try {\n      const currentAccount = walletIntegrationService.getCurrentAccount();\n      if (currentAccount) {\n        const balance = await walletIntegrationService.getAccountBalance(currentAccount.id);\n        setUserBalance({\n          nrn: balance.nrnBalance,\n          balance: balance.balance\n        });\n      }\n    } catch (error) {\n      console.error('Failed to load user balance:', error);\n    }\n  }, []);\n\n  const handleScanResult = useCallback((data: string) => {\n    try {\n      // Parse QR code using the payment service\n      const scanResult = qrPaymentService.parseQRCode(data);\n\n      if (!scanResult.success) {\n        setError(scanResult.error || 'Invalid QR code');\n        return;\n      }\n\n      if (scanResult.data?.type === 'payment') {\n        setPaymentState({\n          step: 'confirming',\n          request: scanResult.data\n        });\n      } else {\n        // For non-payment QR codes, just pass the raw data\n        onScan(data);\n      }\n    } catch (error) {\n      console.error('QR scan error:', error);\n      setPaymentState({\n        step: 'error',\n        error: error instanceof Error ? error.message : 'QR scan failed'\n      });\n    }\n  }, [onScan]);\n\n  const initializeScanner = useCallback(async () => {\n    if (!videoRef.current) return;\n\n    try {\n      setError(null);\n      setScanning(true);\n\n      const scanner = new QrScanner(\n        videoRef.current,\n        (result) => handleScanResult(result.data),\n        {\n          highlightScanRegion: true,\n          highlightCodeOutline: true,\n          preferredCamera: 'environment', // Use back camera on mobile\n        }\n      );\n\n      // Check if device has flash\n      const hasFlashSupport = await QrScanner.hasCamera();\n      setHasFlash(hasFlashSupport);\n\n      await scanner.start();\n      setQrScanner(scanner);\n      setScanning(false);\n    } catch (err) {\n      console.error('Failed to initialize QR scanner:', err);\n      setError('Failed to access camera. Please check permissions.');\n      setScanning(false);\n    }\n  }, [handleScanResult]);\n\n  useEffect(() => {\n    if (isOpen && videoRef.current) {\n      initializeScanner();\n      loadUserBalance();\n    }\n\n    return () => {\n      if (qrScanner) {\n        qrScanner.destroy();\n      }\n    };\n  }, [isOpen, initializeScanner, loadUserBalance, qrScanner]);\n\n  // Handle payment confirmation\n  /* const handlePaymentConfirmation = async () => {\n    if (!paymentState.request) return;\n\n    setPaymentState(prev => ({ ...prev, step: 'processing' }));\n\n    try {\n      const result = await qrPaymentService.processPayment(paymentState.request);\n\n      if (result.success) {\n        setPaymentState({\n          step: 'success',\n          request: paymentState.request,\n          result\n        });\n      } else {\n        setPaymentState({\n          step: 'error',\n          request: paymentState.request,\n          error: result.error || 'Payment processing failed'\n        });\n      }\n    } catch (error) {\n      setPaymentState({\n        step: 'error',\n        request: paymentState.request,\n        error: error instanceof Error ? error.message : 'Payment failed'\n      });\n    }\n  }; */\n\n  // Cancel payment and return to scanning\n  /* const handlePaymentCancel = () => {\n    setPaymentState({ step: 'scanning' });\n  }; */\n\n  // Retry payment after error\n  /* const handlePaymentRetry = () => {\n    if (paymentState.request) {\n      setPaymentState({\n        step: 'confirming',\n        request: paymentState.request\n      });\n    } else {\n      setPaymentState({ step: 'scanning' });\n    }\n  }; */\n\n  // Process the payment\n  const processPayment = async () => {\n    if (!paymentState.request) {\n      setError('Payment request not available');\n      return;\n    }\n\n    setPaymentState(prev => ({ ...prev, step: 'processing' }));\n\n    try {\n      const request = paymentState.request;\n      let transactionId: string;\n\n      if (request.type === 'skill_invocation' && request.skillId && request.nrnCost) {\n        // Handle skill invocation payment\n        transactionId = await walletIntegrationService.invokeSkill({\n          skillId: request.skillId,\n          skillName: request.skillName || request.skillId,\n          nrnCost: request.nrnCost,\n          parameters: {},\n          expectedOutput: {},\n          timeout: 30000\n        });\n      } else if (request.type === 'payment' && request.amount && request.recipient) {\n        // Handle regular payment\n        const transactionRequest: TransactionRequest = {\n          from: walletIntegrationService.getCurrentAccount()?.address || '',\n          to: request.recipient,\n          amount: request.amount,\n          memo: request.memo,\n          nrnAmount: request.nrnCost\n        };\n\n        transactionId = await walletIntegrationService.createTransaction(transactionRequest);\n      } else {\n        throw new Error('Unsupported payment type');\n      }\n\n      // Monitor transaction status\n      const transaction = await walletIntegrationService.checkTransactionStatus(transactionId);\n\n      setPaymentState({\n        step: 'success',\n        request,\n        transaction: transaction || undefined\n      });\n\n      // Refresh balance\n      await loadUserBalance();\n\n    } catch (error) {\n      console.error('Payment processing failed:', error);\n      setPaymentState({\n        step: 'error',\n        request: paymentState.request,\n        error: error instanceof Error ? error.message : 'Payment failed'\n      });\n    }\n  };\n\n  // Cancel payment and return to scanning\n  const cancelPayment = () => {\n    setPaymentState({ step: 'scanning' });\n    setError(null);\n  };\n\n  const toggleFlash = async () => {\n    if (qrScanner && hasFlash) {\n      try {\n        // Note: setFlash method may not be available in all QrScanner versions\n        // This is a simplified implementation\n        setFlashEnabled(!flashEnabled);\n        console.log('Flash toggle requested:', !flashEnabled);\n      } catch (err) {\n        console.error('Failed to toggle flash:', err);\n      }\n    }\n  };\n\n  const handleClose = () => {\n    if (qrScanner) {\n      qrScanner.destroy();\n      setQrScanner(null);\n    }\n    setError(null);\n    setFlashEnabled(false);\n    onClose();\n  };\n\n  if (!isOpen) return null;\n\n  return (\n    <div className=\"fixed inset-0 bg-black z-50 flex flex-col\">\n      {/* Header */}\n      <div className=\"flex items-center justify-between p-4 bg-gray-900 text-white\">\n        <h2 className=\"text-lg font-semibold flex items-center gap-2\">\n          <Camera size={20} />\n          Scan QR Code\n        </h2>\n        <div className=\"flex items-center gap-2\">\n          {hasFlash && (\n            <button\n              onClick={toggleFlash}\n              className=\"p-2 rounded-full bg-gray-700 hover:bg-gray-600 transition-colors\"\n            >\n              {flashEnabled ? <FlashlightOff size={20} /> : <Flashlight size={20} />}\n            </button>\n          )}\n          <button\n            onClick={handleClose}\n            className=\"p-2 rounded-full bg-gray-700 hover:bg-gray-600 transition-colors\"\n          >\n            <X size={20} />\n          </button>\n        </div>\n      </div>\n\n      {/* Scanner Area or Payment UI */}\n      <div className=\"flex-1 relative\">\n        {paymentState.step === 'scanning' ? (\n          <>\n            <video\n              ref={videoRef}\n              className=\"w-full h-full object-cover\"\n              playsInline\n              muted\n            />\n\n            {/* Scanning overlay */}\n            <div className=\"absolute inset-0 flex items-center justify-center\">\n              <div className=\"relative\">\n                {/* Scanning frame */}\n                <div className=\"w-64 h-64 border-2 border-white rounded-lg relative\">\n                  <div className=\"absolute top-0 left-0 w-8 h-8 border-t-4 border-l-4 border-blue-500 rounded-tl-lg\"></div>\n                  <div className=\"absolute top-0 right-0 w-8 h-8 border-t-4 border-r-4 border-blue-500 rounded-tr-lg\"></div>\n                  <div className=\"absolute bottom-0 left-0 w-8 h-8 border-b-4 border-l-4 border-blue-500 rounded-bl-lg\"></div>\n                  <div className=\"absolute bottom-0 right-0 w-8 h-8 border-b-4 border-r-4 border-blue-500 rounded-br-lg\"></div>\n\n                  {scanning && (\n                    <div className=\"absolute inset-0 flex items-center justify-center\">\n                      <div className=\"w-6 h-6 border-2 border-blue-500 border-t-transparent rounded-full animate-spin\"></div>\n                    </div>\n                  )}\n                </div>\n              </div>\n            </div>\n          </>\n        ) : (\n          /* Payment Workflow UI */\n          <div className=\"flex-1 bg-gray-900 p-6 flex flex-col justify-center\">\n            {paymentState.step === 'confirming' && paymentState.request && (\n              <div className=\"max-w-md mx-auto w-full space-y-6\">\n                <div className=\"text-center\">\n                  <Wallet className=\"w-16 h-16 mx-auto mb-4 text-blue-400\" />\n                  <h3 className=\"text-xl font-semibold text-white mb-2\">Confirm Payment</h3>\n                  <p className=\"text-gray-400\">Review the payment details below</p>\n                </div>\n\n                <div className=\"bg-gray-800 rounded-lg p-4 space-y-3\">\n                  <div className=\"flex justify-between\">\n                    <span className=\"text-gray-400\">Type:</span>\n                    <span className=\"text-white capitalize\">{paymentState.request.type.replace('_', ' ')}</span>\n                  </div>\n\n                  {paymentState.request.skillName && (\n                    <div className=\"flex justify-between\">\n                      <span className=\"text-gray-400\">Skill:</span>\n                      <span className=\"text-white\">{paymentState.request.skillName}</span>\n                    </div>\n                  )}\n\n                  {paymentState.request.amount && (\n                    <div className=\"flex justify-between\">\n                      <span className=\"text-gray-400\">Amount:</span>\n                      <span className=\"text-white\">{paymentState.request.amount} KNIRV</span>\n                    </div>\n                  )}\n\n                  {paymentState.request.nrnCost && (\n                    <div className=\"flex justify-between\">\n                      <span className=\"text-gray-400\">NRN Cost:</span>\n                      <span className=\"text-yellow-400\">{paymentState.request.nrnCost} NRN</span>\n                    </div>\n                  )}\n\n                  {paymentState.request.recipient && (\n                    <div className=\"flex justify-between\">\n                      <span className=\"text-gray-400\">To:</span>\n                      <span className=\"text-white font-mono text-sm\">{paymentState.request.recipient.slice(0, 20)}...</span>\n                    </div>\n                  )}\n                </div>\n\n                <div className=\"bg-gray-800 rounded-lg p-4\">\n                  <div className=\"flex justify-between mb-2\">\n                    <span className=\"text-gray-400\">Your Balance:</span>\n                    <span className=\"text-white\">{userBalance.balance} KNIRV</span>\n                  </div>\n                  <div className=\"flex justify-between\">\n                    <span className=\"text-gray-400\">NRN Balance:</span>\n                    <span className=\"text-yellow-400\">{userBalance.nrn} NRN</span>\n                  </div>\n                </div>\n\n                <div className=\"flex space-x-3\">\n                  <button\n                    onClick={cancelPayment}\n                    className=\"flex-1 py-3 px-4 bg-gray-700 hover:bg-gray-600 text-white rounded-lg transition-colors\"\n                  >\n                    Cancel\n                  </button>\n                  <button\n                    onClick={processPayment}\n                    className=\"flex-1 py-3 px-4 bg-blue-600 hover:bg-blue-700 text-white rounded-lg transition-colors flex items-center justify-center space-x-2\"\n                  >\n                    <Send className=\"w-4 h-4\" />\n                    <span>Confirm Payment</span>\n                  </button>\n                </div>\n              </div>\n            )}\n\n            {paymentState.step === 'processing' && (\n              <div className=\"max-w-md mx-auto w-full text-center space-y-6\">\n                <Loader className=\"w-16 h-16 mx-auto text-blue-400 animate-spin\" />\n                <div>\n                  <h3 className=\"text-xl font-semibold text-white mb-2\">Processing Payment</h3>\n                  <p className=\"text-gray-400\">Please wait while we process your transaction...</p>\n                </div>\n              </div>\n            )}\n\n            {paymentState.step === 'success' && paymentState.transaction && (\n              <div className=\"max-w-md mx-auto w-full text-center space-y-6\">\n                <CheckCircle className=\"w-16 h-16 mx-auto text-green-400\" />\n                <div>\n                  <h3 className=\"text-xl font-semibold text-white mb-2\">Payment Successful</h3>\n                  <p className=\"text-gray-400\">Your transaction has been processed</p>\n                </div>\n\n                <div className=\"bg-gray-800 rounded-lg p-4 text-left\">\n                  <div className=\"flex justify-between mb-2\">\n                    <span className=\"text-gray-400\">Transaction ID:</span>\n                    <span className=\"text-white font-mono text-sm\">{paymentState.transaction.id}</span>\n                  </div>\n                  <div className=\"flex justify-between\">\n                    <span className=\"text-gray-400\">Status:</span>\n                    <span className=\"text-green-400\">{paymentState.transaction.status}</span>\n                  </div>\n                </div>\n\n                <button\n                  onClick={handleClose}\n                  className=\"w-full py-3 px-4 bg-green-600 hover:bg-green-700 text-white rounded-lg transition-colors\"\n                >\n                  Done\n                </button>\n              </div>\n            )}\n\n            {paymentState.step === 'error' && (\n              <div className=\"max-w-md mx-auto w-full text-center space-y-6\">\n                <AlertCircle className=\"w-16 h-16 mx-auto text-red-400\" />\n                <div>\n                  <h3 className=\"text-xl font-semibold text-white mb-2\">Payment Failed</h3>\n                  <p className=\"text-gray-400\">{paymentState.error || 'An error occurred while processing your payment'}</p>\n                </div>\n\n                <div className=\"flex space-x-3\">\n                  <button\n                    onClick={cancelPayment}\n                    className=\"flex-1 py-3 px-4 bg-gray-700 hover:bg-gray-600 text-white rounded-lg transition-colors\"\n                  >\n                    Back to Scanner\n                  </button>\n                  <button\n                    onClick={processPayment}\n                    className=\"flex-1 py-3 px-4 bg-red-600 hover:bg-red-700 text-white rounded-lg transition-colors\"\n                  >\n                    Retry\n                  </button>\n                </div>\n              </div>\n            )}\n          </div>\n        )}\n      </div>\n\n      {/* Instructions */}\n      <div className=\"p-4 bg-gray-900 text-white text-center\">\n        <p className=\"text-sm\">\n          Position the QR code within the frame to scan\n        </p>\n        {error && (\n          <p className=\"text-red-400 text-sm mt-2\">\n            {error}\n          </p>\n        )}\n      </div>\n    </div>\n  );\n}\n"],"names":["QRPaymentService","baseUrl","qrData","paymentRequest","parsed","error","startTime","paymentId","transactionId","receipt","result","skillResult","connectResult","deployResult","processingTime","request","transactionRequest","walletIntegrationService","skillInvocation","_request","account","localReceipt","r","transaction","data","dataTyped","uri","protocol","rest","path","queryString","params","type","expires","qrPaymentService","QRScanner","onScan","onClose","isOpen","videoRef","useRef","qrScanner","setQrScanner","useState","hasFlash","setHasFlash","flashEnabled","setFlashEnabled","scanning","setScanning","setError","paymentState","setPaymentState","userBalance","setUserBalance","loadUserBalance","useCallback","currentAccount","balance","handleScanResult","scanResult","initializeScanner","scanner","QrScanner","hasFlashSupport","err","useEffect","processPayment","prev","cancelPayment","toggleFlash","handleClose","jsxs","jsx","Camera","FlashlightOff","Flashlight","X","Fragment","Wallet","Send","Loader","CheckCircle","AlertCircle"],"mappings":"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"}